user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log notice;
pid /var/run/nginx.pid;
events {
    worker_connections 10240;
}
http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';
    #access_log /var/log/nginx/access.log main;
    access_log off;
    sendfile on;
    #tcp_nopush     on;
    keepalive_timeout 65;
    #gzip  on;
    # If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
    # scheme used to connect to this server
    map $http_x_forwarded_proto $proxy_x_forwarded_proto {
        default $http_x_forwarded_proto;
        '' $scheme;
    }
    map $http_x_forwarded_host $proxy_x_forwarded_host {
        default $http_x_forwarded_host;
        '' $http_host;
    }
    # If we receive X-Forwarded-Port, pass it through; otherwise, pass along the
    # server port the client connected to
    map $http_x_forwarded_port $proxy_x_forwarded_port {
        default $http_x_forwarded_port;
        '' $server_port;
    }
    # If we receive Upgrade, set Connection to "upgrade"; otherwise, preserve
    # NGINX's default behavior ("Connection: close").
    map $http_upgrade $proxy_connection {
        default upgrade;
        '' close;
    }
    # Apply fix for very long server names
    server_names_hash_bucket_size 128;
    # Default dhparam
    ssl_dhparam /opt/cert/dhparam.pem;
    # Set appropriate X-Forwarded-Ssl header based on $proxy_x_forwarded_proto
    map $proxy_x_forwarded_proto $proxy_x_forwarded_ssl {
        default off;
        https on;
    }
    gzip_types text/plain text/css application/javascript application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
    log_format vhost '$host $remote_addr - $remote_user [$time_local] '
    '"$request" $status $body_bytes_sent '
    '"$http_referer" "$http_user_agent" '
    '"$upstream_addr"';
    access_log off;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384';
    ssl_prefer_server_ciphers off;
    error_log /dev/stderr;
    # HTTP 1.1 support
    proxy_http_version 1.1;
    proxy_buffering off;
    proxy_set_header Host $http_host;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $proxy_connection;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Host $proxy_x_forwarded_host;
    proxy_set_header X-Forwarded-Proto $proxy_x_forwarded_proto;
    proxy_set_header X-Forwarded-Ssl $proxy_x_forwarded_ssl;
    proxy_set_header X-Forwarded-Port $proxy_x_forwarded_port;
    proxy_set_header X-Original-URI $request_uri;
    # Mitigate httpoxy attack (see README for details)
    proxy_set_header Proxy "";
    server {
        server_name _ This is just an invalid value which will never trigger on a real hostname.
        server_tokens off;
        listen 80;
        #access_log /var/log/nginx/access.log vhost;
        access_log off;
        return 503;
        listen 443 ssl;
        http2 on;
        ssl_session_cache shared:SSL:50m;
        ssl_session_tickets off;
        ssl_certificate /opt/cert/default.crt;
        ssl_certificate_key /opt/cert/default.key;
    }
    # sub.test.com
    server {
        server_name sub.test.com sub.test2.com;
        listen 80;
        listen 8080;
        #access_log /var/log/nginx/access.log vhost;
        access_log off;
        location ~ ^/wss([0-9]+)$ {
            proxy_redirect off;
            proxy_pass http://127.0.0.1:$1;
        }
        # Do not HTTPS redirect Let's Encrypt ACME challenge
        location ^~ /.well-known/acme-challenge/ {
            auth_basic off;
            auth_request off;
            allow all;
            root /usr/share/nginx/html;
            try_files $uri =404;
            break;
        }
        location / {
            return 301 https://$host$request_uri;
        }
    }
    server {
        server_name sub.test.com sub.test2.com;
        #access_log /var/log/nginx/access.log vhost;
        access_log off;
        listen 443 ssl so_keepalive=on;
        listen [::]:443 ssl ipv6only=on;
        listen 2083 ssl so_keepalive=on;
        listen [::]:2083 ssl ipv6only=on;
        http2 on;
        ssl_session_timeout 5m;
        ssl_session_cache shared:SSL:50m;
        ssl_session_tickets off;
        ssl_certificate /opt/cert/fullchain.crt;
        ssl_certificate_key /opt/cert/private.key;
        ssl_dhparam /opt/cert/dhparam.pem;
        ssl_stapling on;
        ssl_stapling_verify on;
        ssl_trusted_certificate /opt/cert/fullchain.crt;
        resolver 8.8.8.8;
        set $sts_header "";
        if ($https) {
            set $sts_header "max-age=31536000";
        }
        add_header Strict-Transport-Security $sts_header always;
        ## Start of configuration add by letsencrypt container
        location ^~ /.well-known/acme-challenge/ {
            auth_basic off;
            auth_request off;
            allow all;
            root /usr/share/nginx/html;
            try_files $uri =404;
            break;
        }
        ## End of configuration add by letsencrypt container
        location ~ ^/wss([0-9]+)$ {
            proxy_redirect off;
            proxy_pass http://127.0.0.1:$1;
        }
        location ~ /grpc([0-9]+) {
            client_max_body_size 0;
            client_body_buffer_size 512k;
            grpc_set_header X-Real-IP $remote_addr;
            client_body_timeout 52w;
            grpc_read_timeout 1h;
            grpc_send_timeout 1h;
            grpc_pass grpc://127.0.0.1:$1;
        }
        location / {
            root /usr/share/nginx/html;
            return 503;
        }
    }
}
